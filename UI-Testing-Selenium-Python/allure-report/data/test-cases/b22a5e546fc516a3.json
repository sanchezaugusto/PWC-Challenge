{"uid":"b22a5e546fc516a3","name":"test_modify_shopping_cart","fullName":"tests.Desktop.test_5_desktop#test_modify_shopping_cart","historyId":"e8c2409cd0d88160220aea0cf4187fe5","time":{"start":1737653512948,"stop":1737653533594,"duration":20646},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.265)\nStacktrace:\n\tGetHandleVerifier [0x0027FD53+23747]\n\t(No symbol) [0x00207D54]\n\t(No symbol) [0x000DBCCD]\n\t(No symbol) [0x00120C72]\n\t(No symbol) [0x00115F57]\n\t(No symbol) [0x00141DFC]\n\t(No symbol) [0x001159A4]\n\t(No symbol) [0x00142094]\n\t(No symbol) [0x0015B41E]\n\t(No symbol) [0x00141B96]\n\t(No symbol) [0x00113F3C]\n\t(No symbol) [0x00114EBD]\n\tGetHandleVerifier [0x0055AC73+3017699]\n\tGetHandleVerifier [0x0056B93B+3086507]\n\tGetHandleVerifier [0x005640F2+3055714]\n\tGetHandleVerifier [0x00315AF0+637536]\n\t(No symbol) [0x00210A5D]\n\t(No symbol) [0x0020DA28]\n\t(No symbol) [0x0020DBC5]\n\t(No symbol) [0x002007F0]\n\tBaseThreadInitThunk [0x7768FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77BF809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77BF806E+238]\n\t(No symbol) [0x00000000]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4abe9adfbdc2ad8a7a26f8d967157a0e\")>\n\n    def test_modify_shopping_cart(driver):\n        driver, device = driver\n        home_page = HomePage(driver)\n    \n        home_page.configHome(url=APP_URL, device = DEVICE[device])\n        # Arrange\n        home_page.wait_for_element(By.XPATH, PRODUCT_A_XPATH)\n    \n        # Act\n        hover_and_add_to_cart(driver, PRODUCT_A_XPATH, QUICK_VIEW_A)\n>       hover_and_add_to_cart(driver, PRODUCT_B_XPATH, QUICK_VIEW_B)\n\ntests\\Desktop\\test_5_desktop.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils\\product_interactions.py:27: in hover_and_add_to_cart\n    addtocart2Button.click()\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027AE322D010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...jectPath [0x77BF809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BF806E+238]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=131.0.6778.265)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0027FD53+23747]\nE       \t(No symbol) [0x00207D54]\nE       \t(No symbol) [0x000DBCCD]\nE       \t(No symbol) [0x00120C72]\nE       \t(No symbol) [0x00115F57]\nE       \t(No symbol) [0x00141DFC]\nE       \t(No symbol) [0x001159A4]\nE       \t(No symbol) [0x00142094]\nE       \t(No symbol) [0x0015B41E]\nE       \t(No symbol) [0x00141B96]\nE       \t(No symbol) [0x00113F3C]\nE       \t(No symbol) [0x00114EBD]\nE       \tGetHandleVerifier [0x0055AC73+3017699]\nE       \tGetHandleVerifier [0x0056B93B+3086507]\nE       \tGetHandleVerifier [0x005640F2+3055714]\nE       \tGetHandleVerifier [0x00315AF0+637536]\nE       \t(No symbol) [0x00210A5D]\nE       \t(No symbol) [0x0020DA28]\nE       \t(No symbol) [0x0020DBC5]\nE       \t(No symbol) [0x002007F0]\nE       \tBaseThreadInitThunk [0x7768FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BF809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BF806E+238]\nE       \t(No symbol) [0x00000000]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1737653333737,"stop":1737653336251,"duration":2514},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"cleanup_after_test","time":{"start":1737653512948,"stop":1737653512948,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.265)\nStacktrace:\n\tGetHandleVerifier [0x0027FD53+23747]\n\t(No symbol) [0x00207D54]\n\t(No symbol) [0x000DBCCD]\n\t(No symbol) [0x00120C72]\n\t(No symbol) [0x00115F57]\n\t(No symbol) [0x00141DFC]\n\t(No symbol) [0x001159A4]\n\t(No symbol) [0x00142094]\n\t(No symbol) [0x0015B41E]\n\t(No symbol) [0x00141B96]\n\t(No symbol) [0x00113F3C]\n\t(No symbol) [0x00114EBD]\n\tGetHandleVerifier [0x0055AC73+3017699]\n\tGetHandleVerifier [0x0056B93B+3086507]\n\tGetHandleVerifier [0x005640F2+3055714]\n\tGetHandleVerifier [0x00315AF0+637536]\n\t(No symbol) [0x00210A5D]\n\t(No symbol) [0x0020DA28]\n\t(No symbol) [0x0020DBC5]\n\t(No symbol) [0x002007F0]\n\tBaseThreadInitThunk [0x7768FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77BF809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77BF806E+238]\n\t(No symbol) [0x00000000]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4abe9adfbdc2ad8a7a26f8d967157a0e\")>\n\n    def test_modify_shopping_cart(driver):\n        driver, device = driver\n        home_page = HomePage(driver)\n    \n        home_page.configHome(url=APP_URL, device = DEVICE[device])\n        # Arrange\n        home_page.wait_for_element(By.XPATH, PRODUCT_A_XPATH)\n    \n        # Act\n        hover_and_add_to_cart(driver, PRODUCT_A_XPATH, QUICK_VIEW_A)\n>       hover_and_add_to_cart(driver, PRODUCT_B_XPATH, QUICK_VIEW_B)\n\ntests\\Desktop\\test_5_desktop.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils\\product_interactions.py:27: in hover_and_add_to_cart\n    addtocart2Button.click()\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027AE322D010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...jectPath [0x77BF809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BF806E+238]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=131.0.6778.265)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0027FD53+23747]\nE       \t(No symbol) [0x00207D54]\nE       \t(No symbol) [0x000DBCCD]\nE       \t(No symbol) [0x00120C72]\nE       \t(No symbol) [0x00115F57]\nE       \t(No symbol) [0x00141DFC]\nE       \t(No symbol) [0x001159A4]\nE       \t(No symbol) [0x00142094]\nE       \t(No symbol) [0x0015B41E]\nE       \t(No symbol) [0x00141B96]\nE       \t(No symbol) [0x00113F3C]\nE       \t(No symbol) [0x00114EBD]\nE       \tGetHandleVerifier [0x0055AC73+3017699]\nE       \tGetHandleVerifier [0x0056B93B+3086507]\nE       \tGetHandleVerifier [0x005640F2+3055714]\nE       \tGetHandleVerifier [0x00315AF0+637536]\nE       \t(No symbol) [0x00210A5D]\nE       \t(No symbol) [0x0020DA28]\nE       \t(No symbol) [0x0020DBC5]\nE       \t(No symbol) [0x002007F0]\nE       \tBaseThreadInitThunk [0x7768FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BF809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BF806E+238]\nE       \t(No symbol) [0x00000000]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","steps":[],"attachments":[{"uid":"d528e2ed3991c9f1","name":"stdout","source":"d528e2ed3991c9f1.txt","type":"text/plain","size":2688}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"cleanup_after_test::0","time":{"start":1737653533707,"stop":1737653609604,"duration":75897},"status":"broken","statusMessage":"Exception: No se pudo encontrar el botón Home usando los selectores disponibles.\n","statusTrace":"  File \"C:\\Users\\Augusto  Sanchez\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Augusto  Sanchez\\AppData\\Roaming\\Python\\Python313\\site-packages\\_pytest\\fixtures.py\", line 907, in _teardown_yield_fixture\n    next(it)\n    ~~~~^^^^\n  File \"C:\\Users\\Augusto  Sanchez\\Desktop\\Testing Projects\\PWC-Challenge\\UI-Testing-Selenium-Python\\conftest.py\", line 39, in cleanup_after_test\n    base_page_obj.go_to_home()\n    ~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Augusto  Sanchez\\Desktop\\Testing Projects\\PWC-Challenge\\UI-Testing-Selenium-Python\\page\\base_page.py\", line 49, in go_to_home\n    raise Exception(\"No se pudo encontrar el botón Home usando los selectores disponibles.\")\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"driver::0","time":{"start":1737654848475,"stop":1737654850668,"duration":2193},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests.Desktop"},{"name":"suite","value":"test_5_desktop"},{"name":"host","value":"Sherlock"},{"name":"thread","value":"21012-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Desktop.test_5_desktop"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b22a5e546fc516a3.json","parameterValues":[]}